import java.text.DateFormat
import java.text.SimpleDateFormat

def uuTrimAndQuote = { val ->
    return "\"" + val.trim() + "\""
}

def getBuildBranch = { ->

    def val = null

    try {
        //	git rev-parse --abbrev-ref HEAD
        def cmdLineOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
            standardOutput = cmdLineOut
        }

        val = "$cmdLineOut"

    } catch (ex) {
        project.logger.lifecycle("Caught exception getting branch name from git: $ex")
    }

    if (val == null) {
        val = ""
    }

    def result = uuTrimAndQuote(val)
    project.logger.lifecycle("buildBranch: $result")
    return result
}

ext {
    BUILD_BRANCH = getBuildBranch()
}

def getBuildCommitHash = { ->

    def val = null

    try {
        //	git rev-parse --abbrev-ref HEAD
        def cmdLineOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "HEAD"
            standardOutput = cmdLineOut
        }

        val = "$cmdLineOut"

    } catch (ex) {
        project.logger.lifecycle("Caught exception getting branch commit hash from git: $ex")
    }

    if (val == null) {
        val = ""
    }

    def result = uuTrimAndQuote(val)
    project.logger.lifecycle("buildCommitHash: $result")
    return result
}

def getBuildDate = { ->

    DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss ZZZ")
    def val = df.format(new Date())

	def result = "\"" + val.trim().replace("'", "") + "\""
    project.logger.lifecycle("buildDate: $result")
    return result
}

ext {
    PUBLISH_GROUP_ID = 'com.silverpine.uu'
    BUILD_VERSION = version
    BUILD_COMMIT_HASH = getBuildCommitHash()
    BUILD_DATE = getBuildDate()
}

group = PUBLISH_GROUP_ID

project.logger.lifecycle("version: $version")

android {

    defaultConfig {

        buildConfigField "String", "BUILD_VERSION", uuTrimAndQuote(BUILD_VERSION)
        buildConfigField "String", "BUILD_BRANCH", BUILD_BRANCH
        buildConfigField "String", "BUILD_COMMIT_HASH", BUILD_COMMIT_HASH
        buildConfigField "String", "BUILD_DATE", BUILD_DATE
    }
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version BUILD_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact androidSourcesJar
                //artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = PUBLISH_DESCRIPTION
                    url = 'https://github.com/SilverpineSoftware/' + SCM_MODULE_NAME
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/SilverpineSoftware/' + SCM_MODULE_NAME + '/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'ryandevore'
                            name = 'Ryan DeVore'
                            email = 'ryan@silverpine.com'
                        }
                        // Add all other devs here...
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = 'scm:git:github.com/SilverpineSoftware/' + SCM_MODULE_NAME + '.git'
                        developerConnection = 'scm:git:ssh://github.com/SilverpineSoftware/' + SCM_MODULE_NAME + '.git'
                        url = 'https://github.com/SilverpineSoftware/' + SCM_MODULE_NAME + '/tree/main'
                    }
                }
            }
        }
    }
}


